/*
ЛЕКЦИЯ 5:

>>> К каждому языку программирования есть гайды, содержащие рекомендации по его оформлению -
    именование переменных, методов и т.п. Также бывают командные гайды, это когда в какой-либо
    команде (в месте работы) определен ряд правил оформления кода. 
>>> При именовании переменных не использовать сокращения, кроме общепринятых.
>>> Не использовать при именовании переменных и методов потенциально или явно конфликтующие
    со стандартными идентификаторами. 
>>> Не использовать очень сложные наименования. При это не стоит усердствовать с сокращениями.
>>> Не использовать нижнее подчеркивание.
>>> Именование бывает двух типов:
    - Pascal - когда первая буква Заглавная и последующие первые буквы тоже Заглавные 
    (обычно применяется в именовании методов);
    - Camel - когда первая буква строчная, а последующие первые буквы Заглавные (обычно 
    применяется в именовании переменных).
    Перед началом разработки проекта, обычно команда обсуждает в каком стиле будет оформляться
    проект, чтобы при объединении разных блоков Проекта, общий итоговый код был в едином стиле
    и не возникало проблем.
>>> Не размещать разные инструкции на одной строке - каждую инструкцию начинать с новой строки.
>>> Длинные выражения разбивать на несколько строк, при переносе указывать операторы (&&, || 
    и т.п.) на новой строке.
>>> Не делать строки с кодом длиннее 130 символов (может варьироваться), чтобы строки вмещались
    на разных мониторах.

>>> Наименование асинхронных методов должны заканчиваться на "...Async".
>>> Тип данных var (неявная типизация) - используется для локальных переменных в случаях, 
    когда тип переменной понятен из правой части назначения или когда точный тип не важен.
>>> Объявлять переменную перед ее непосредственным использованием.
>>> Наименование счетчиков не придумывать названия, использовать стандартные названия:
    i, j, k, l, m, n...
>>> Комментировать (описывать) код на каждой строке не стоит, но некоторые его части все же 
    надо описывать, чтобы было проще вспомнить потом или для тех, кто его будет читать/ использовать.
====================================================================================================

ЛЕКЦИЯ 6:

>>> Don`t repeat yourself (DRY) - это принцип разработки программного обеспечения, нацеленный на снижение 
    повторения информации различного рода.
>>> You aren`t gonna need it (YAGNI) - "Вам это не понадобится", процесс и принцип проектирования ПО, 
    при котором в качестве основной цели и/или ценности декларируется отказ от избыточной 
    функциональности, в которой нет непосредственной надобности. (Не делай лишней работы и не нужной
    инициативы при написании программы).
>>> Keep it simple, stupid (KISS) - принцип, запрещающий использование более сложных средств, чем
    необходимо. Принцип декларирует простоту системы в качестве основной цели и/или ценности. 
    (Чем проще код, тем лучше и тем легче его поддерживать).
>>> Придерживаться Code Convention (Стандарт оформления кода), используемый в проекте.
>>> Необходимо делать комментарии, описывающие код, но не к каждой переменной и строке. В C# есть
    возможность создавать комментарии, которые затем будут высвечиваться в подсказках по всему коду - 
    /// после ввода должен сформироваться шаблон комментария, с включенными наименованиями переменных и т.д.
>>> Необходимо всегда проводить внутреннюю декомпозицию. 
>>> Чем больше методов, тем лучше, ибо это логическая группировка маленького кусочка кода - выше
    читаемость (см. также про декомпозицию).
>>> Большое кол-во циклов и условий - плохо, снижается читаемость. Код анализаторы следят за 
    циклоавтоматическим числом и говорят, что пора разбивать функцию. Также большое циклов и условий
    кол-во замедляет работу программы.
>>> При написании какого-либо метода/ кода необходимо делать тесты, т.е. писать сразу тестируемы
    код (писать сами тесты сразу). При трудоустройстве лучше продемонстрировать данный навык.
>>> Следить за входными данными, особенно за теми, которые задает юзер. ПРоверять их вначале, а не
    размазывать все проверки по всему проекту.
>>> Чаще задавать себе вопрос: "как упросить то, что написано?"
>>> Придерживаться данных принципов:
    Придерживаться принципа SOLID.
    Не использовать антипаттены.
    Использовать паттерны.
    Декомпозировать.
    Писать тесты.
    Придерживаться Code Convention.
*/


